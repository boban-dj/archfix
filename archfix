#!/bin/bash
# This script comes with no warranty …use at own risk
# Copyright (C) 2014  Mike Krüger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program or from the site that you downloaded it
# from; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307   USA
#
# my personal Arch Linux Installation script 
# Version Alpha 1

RESULT=0
COUNTER=0
CHOISE_ARRAY=''
HDD_NAME=''
TOTAL_HDD_SIZE=''
TOTAL_RAM_SIZE=''
SWAP_SIZE=''
ROOT_SIZE=''
HOME_SIZE=''
BOOT_SIZE=200
HOSTNAME='r2d2'
LANGUAGE="de_DE"
KEYMAP="de-latin1"
TIMEZONE="Europe/Berlin"
ARCH=`uname -m`

message_print() {
  if [ "$1" = 1 ]
  then
    # green
    color="32"
  else
    # red
    color="31"
  fi
  
  printf "\033[0;${color}m**$2**\033[m \n"
}


function question_yesno() {
  while true; do
    read -p "$1" yn
    case $yn in
      [Yy]* ) RESULT=1; break;;
      [Nn]* ) RESULT=0; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
  return 0
}

function choise_menu() {
  for i in "${CHOISE_ARRAY[@]}"
  do
    COUNTER=$(( $COUNTER + 1 ))
    echo '['$COUNTER'] '$i
  done
  
  while true; do
    read -p "Make your choise |1|2|3... " number
    if [ "$number" -ge 1 -a "$number" -le $COUNTER ];
    then
      RESULT=$number
      break
    else
      message_print 0 "Please select a valid number!"
    fi
  done
  return 0
}

function get_total_hdd_size() {
  TOTAL_HDD_SIZE=$(fdisk -l $1 |grep "Disk "$1":" | head -n 2 | tail -n 1 | cut -d " " -f 5)
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE / 1024))
  #HDD SIZE IN MB
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE / 1024))
  return 0
}

function get_total_ram_size() {
  TOTAL_RAM_SIZE=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  #RAM SIZE IN MB
  TOTAL_RAM_SIZE=$(($TOTAL_RAM_SIZE / 1024))
  return 0
}

function calc_optimal_swap_size() {
  get_total_ram_size
  if [ $TOTAL_RAM_SIZE -lt 513 ]
  then
    SWAP_SIZE=$(($TOTAL_RAM_SIZE * 2))
  else
    SWAP_SIZE=$TOTAL_RAM_SIZE
  fi
  return 0
}

function calc_optimal_patition_size() {
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE - $BOOT_SIZE))
  ROOT_SIZE=$(($TOTAL_HDD_SIZE * 15 / 100))
  HOME_SIZE=$(($TOTAL_HDD_SIZE - $ROOT_SIZE))
}

function partitioning() {
  calc_optimal_swap_size
  echo "On which drive you want to install Arch?"
  eval CHOISE_ARRAY=("/dev/"$(lsblk | grep disk | cut -d" " -f1) )
  choise_menu
  
  
  HDD_NAME=${CHOISE_ARRAY[$RESULT - 1]}
  echo $HDD_NAME
  get_total_hdd_size $HDD_NAME
  calc_optimal_patition_size
  echo '-----------------------'
  echo 'boot: '$BOOT_SIZE ' MB'
  echo 'root: '$ROOT_SIZE ' MB'
  echo 'home: '$HOME_SIZE ' MB'
  echo ''
  echo 'swap: '$SWAP_SIZE ' MB'
  echo '-----------------------'
  
  #Back to KB Sizes
  BOOT_SIZE=$(($BOOT_SIZE * 1024))
  ROOT_SIZE=$(($ROOT_SIZE * 1024))
  HOME_SIZE=$(($HOME_SIZE * 1024))
  SWAP_SIZE=$(($SWAP_SIZE * 1024))
  
  touch /tmp/fdisk.input
  echo -e "n\np\n1\n\n+"$BOOT_SIZE"K\na\n1\nn\np\n2\n\n+"$SWAP_SIZE"K\nt\n2\n82\nn\np\n3\n\n+"$ROOT_SIZE"K\nn\np\n\n+"$HOME_SIZE"K\nn\np\n\nw" > /tmp/fdisk.input
  
  # Create Partitions
  fdisk $HDD_NAME < /tmp/fdisk.input 1&>2 > /dev/null
  
  # Remove fdisk.input file
  rm /tmp/fdisk.input
  
  mkfs.ext2 -L boot $HDD_NAME'1'
  mkswap -L swap $HDD_NAME'2'
  mkfs.ext4 -L root $HDD_NAME'3'
  mkfs.ext4 -L home $HDD_NAME'4'
  
  #enable swap
  swapon $HDD_NAME'2'
  
  #mount all patitions
  mount $HDD_NAME'3' /mnt
  mkdir /mnt/boot
  mkdir /mnt/home
  mount $HDD_NAME'1' /mnt/boot
  mount $HDD_NAME'4' /mnt/home
  
}

function install_base() {
  pacstrap /mnt base base-devel networkmanager sudo wpa_supplicant grub os-prober
  systemctl enable NetworkManager.service
  genfstab -p /mnt > /mnt/etc/fstab
  arch-chroot /mnt/ echo $HOSTNAME > /etc/hostname
  arch-chroot /mnt/ echo $LANGUAGE'.UTF-8' > /etc/locale.conf
  arch-chroot /mnt/ echo LC_COLLATE=C >> /etc/locale.conf
  arch-chroot /mnt/ echo KEYMAP=$KEYMAP > /etc/vconsole.conf
  arch-chroot /mnt/ ln -s /usr/share/zoneinfo/$TIMEZONE /etc/localtime
  arch-chroot /mnt/ rm -rf /etc/locale.gen
  arch-chroot /mnt/ touch /etc/locale.gen
  arch-chroot /mnt/ echo $LANGUAGE'.UTF-8 UTF-8' >> /etc/locale.gen
  
  #Set locales
  #Steam workaround
  if [ "$LANGUAGE" -ne "en_US" ]
  then
    arch-chroot /mnt/ echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
  else
    echo ''
  fi
  
  arch-chroot /mnt/ locale-gen
  
  #enable mutilib
  MULTILIB=''
  if [ "$ARCH" -eq "x86_64" ]
  then
    arch-chroot /mnt/ local MULTILIB=`grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:`
    if [ -z $MULTILIB ]
    then
      arch-chroot /mnt/ echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
      arch-chroot /mnt/ echo -e '\nMultilib repository added into pacman.conf file'
    else
      arch-chroot /mnt/ sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
      arch-chroot /mnt/ local MULTILIB=$(( $MULTILIB + 1 ))
      arch-chroot /mnt/ sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
    fi
  fi
  
  arch-chroot /mnt/ pacman -Syy
  
  #Enable Grub
  arch-chroot /boot/grub/grub.cfg >> ""
  arch-chroot /boot/grub/grub.cfg >> "# fix broken grub.cfg gen"
  arch-chroot /boot/grub/grub.cfg >> "GRUB_DISABLE_SUBMENU=y"
  arch-chroot /mnt/ grub-mkconfig -o /boot/grub/grub.cfg
  arch-chroot grub-install $HDD_NAME
  
  #create Linux Kernel
  arch-chroot /mnt/ mkinitcpio -p linux
  
  #SET Root password
  arch-chroot /mnt/ passwd
  
  umount $HDD_NAME'1'
  umount $HDD_NAME'3'
  umount $HDD_NAME'4'
  
  reboot #<< end
}



function create_mirrorlist() {
  cd /etc/pacman.d/
  cp mirrorlist mirrorlist.bak
  rankmirrors -n 6 mirrorlist.backup > mirrorlist
  pacman -Syy
}

partitioning
install_base

