#!/bin/bash
# This script comes with no warranty …use at own risk
# Copyright (C) 2014  Mike Krüger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program or from the site that you downloaded it
# from; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307   USA
#
# my personal Arch Linux Installation script 
# Version Alpha 2

RESULT=0
COUNTER=0
CHOISE_ARRAY=''
HDD_NAME=''
TOTAL_HDD_SIZE=''
TOTAL_RAM_SIZE=''
SWAP_SIZE=''
ROOT_SIZE=''
HOME_SIZE=''
BOOT_SIZE=200
HOSTNAME='r2d2'
LANGUAGE="de_DE"
KEYMAP="de-latin1"
TIMEZONE="Europe/Berlin"
ARCH=''
ARCH_ROOT='/mnt'
USERNAME=''
PID=0

function message_print() {
  if [ "$1" = 1 ]
  then
    # green
    color="32"
  else
    # red
    color="31"
  fi
  
  printf "\033[0;${color}m**$2**\033[m \n"
  return 0
}


function question_yesno() {
  while true; do
    read -p "$1" yn
    case $yn in
      [Yy]* ) RESULT=1; break;;
      [Nn]* ) RESULT=0; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
  return 0
}

function choise_menu() {
  for i in "${CHOISE_ARRAY[@]}"
  do
    COUNTER=$(( $COUNTER + 1 ))
    echo '['$COUNTER'] '$i
  done
  
  while true; do
    read -p "Make your choise |1|2|3... " number
    if [ "$number" -ge 1 -a "$number" -le $COUNTER ];
    then
      RESULT=$number
      break
    else
      message_print 0 "Please select a valid number!"
    fi
  done
  return 0
}


function stop_spinner() {
  kill -s SIGHUP $PID &
  { wait $PID; } &> /dev/null
  PID=0
}

function start_spinner() {
  setterm -cursor off
  parts=( "|" "/" "-" "\\" )

  while [ 1 ];
  do
    for ix in 0 1 2 3; 
    do
     echo -en ${parts[$ix]}
     sleep .1
     echo -en "\b"
    done
  done
}

function spinner()  {
  if [ $1 == "start" ];
  then
   if [ $PID -eq 0 ];
   then
   start_spinner&
   PID=$!
   fi
  elif [ $1 == "stop" ];
  then
   if [ $PID -ne 0 ];
   then
   stop_spinner
   fi
  fi
}

function add_module() {
    # thanks to 
    # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
    for MODULE in $1; do
      [[ $# -lt 2 ]] && MODULE_NAME="$MODULE" || MODULE_NAME="$2";
      echo "$MODULE" >> /etc/modules-load.d/$MODULE_NAME.conf
      modprobe "$MODULE"
    done
}

function add_key() {
    # thanks to 
    # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
    pacman-key -r $1
    pacman-key --lsign-key $1
}


function add_repository() { 
    # thanks to 
    # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
    REPO=${1}
    URL=${2}
    [[ -n ${3} ]] && SIGLEVEL="\nSigLevel = ${3}" || SIGLEVEL=""

    CHECK_REPO=`grep -F "${REPO}" /etc/pacman.conf`
    if [[ -z $CHECK_REPO ]]; then
      echo -e "\n[${REPO}]${SIGLEVEL}\nServer = ${URL}" >> /etc/pacman.conf
      pacman -Syy
    fi
}

function replace_line() {
    # thanks to 
    # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
    SEARCH=${1}
    REPLACE=${2}
    FILEPATH=${3}
    FILEBASE=`basename ${3}`

    sed -e "s/${SEARCH}/${REPLACE}/" ${FILEPATH} > /tmp/${FILEBASE} 2>"$LOG"
    if [[ ${?} -eq 0 ]]; then
      mv /tmp/${FILEBASE} ${FILEPATH}
    else
      echo "failed: ${SEARCH} - ${FILEPATH}"
    fi
}

function first_choise() {
  clear
  echo "************************************************"
  echo "************************************************"
  echo "*********                             **********"
  echo "*********      ARCH FIX 2014          **********"
  echo "*********                             **********"
  echo "********* A ARCH INSTALLATION SCRIPT  **********"
  echo "*********                             **********"
  echo "*********        CREATED BY           **********"
  echo "*********        MEMORYLEAKY          **********"
  echo "*********                             **********"
  echo "************************************************"
  echo "************************************************"
  echo ""
  message_print 0 "This script comes with no warranty …use at own risk"

  echo ""
  echo "Whitch Step you want to execute now"
  CHOISE_ARRAY[0]="The first part partitioned your hard drive and install the base system"
  CHOISE_ARRAY[1]="The second part install all packages (xfce,cups,lightdm...) you need to have a good desktop experience"
  choise_menu
  if [ $RESULT -eq 1 ]
  then
   partitioning
   install_base
  else
   optimize_mirrorlist
   install_yaourt
   adduser
   install_powerpill
   install_compress_tools
   install_alsa
   install_pulse
   install_bash_goodies
   install_avahi_deamon
   install_ntfs_tools
   install_openssh
   readahead_on
   install_xserver
   install_infinality_font_config
   install_video_driver
  fi

  #clean
  CHOISE_ARRAY=''
  return 0
}

function get_total_hdd_size() {
  TOTAL_HDD_SIZE=$(fdisk -l $1 |grep "Disk "$1":" | head -n 2 | tail -n 1 | cut -d " " -f 5)
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE / 1024))
  #HDD SIZE IN MB
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE / 1024))
  return 0
}

function get_total_ram_size() {
  TOTAL_RAM_SIZE=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  #RAM SIZE IN MB
  TOTAL_RAM_SIZE=$(($TOTAL_RAM_SIZE / 1024))
  return 0
}

function calc_optimal_swap_size() {
  get_total_ram_size
  if [ $TOTAL_RAM_SIZE -lt 513 ]
  then
    SWAP_SIZE=$(($TOTAL_RAM_SIZE * 2))
  else
    SWAP_SIZE=$TOTAL_RAM_SIZE
  fi
  return 0
}

function calc_optimal_patition_size() {
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE - $BOOT_SIZE))
  ROOT_SIZE=$(($TOTAL_HDD_SIZE * 15 / 100))
  HOME_SIZE=$(($TOTAL_HDD_SIZE - $ROOT_SIZE))
  return 0
}

function arch_chroot() {
  arch-chroot $ARCH_ROOT /bin/bash -c "${1}"
}

function partitioning() {
  calc_optimal_swap_size
  echo "On which drive you want to install Arch?"
  eval CHOISE_ARRAY=("/dev/"$(lsblk | grep disk | cut -d" " -f1) )
  choise_menu
  
  
  HDD_NAME=${CHOISE_ARRAY[$RESULT - 1]}
  echo $HDD_NAME
  get_total_hdd_size $HDD_NAME
  calc_optimal_patition_size
  echo '-----------------------'
  echo 'boot: '$BOOT_SIZE ' MB'
  echo 'root: '$ROOT_SIZE ' MB'
  echo 'home: '$HOME_SIZE ' MB'
  echo ''
  echo 'swap: '$SWAP_SIZE ' MB'
  echo '-----------------------'
  
  #Back to KB Sizes
  BOOT_SIZE=$(($BOOT_SIZE * 1024))
  ROOT_SIZE=$(($ROOT_SIZE * 1024))
  HOME_SIZE=$(($HOME_SIZE * 1024))
  SWAP_SIZE=$(($SWAP_SIZE * 1024))

  #Wiping the entire disk
  dd if=/dev/zero of=$HDD_NAME  bs=512  count=1
  
  touch /tmp/fdisk.input
  echo -e "n\np\n1\n\n+"$BOOT_SIZE"K\na\n1\nn\np\n2\n\n+"$SWAP_SIZE"K\nt\n2\n82\nn\np\n3\n\n+"$ROOT_SIZE"K\nn\np\n4\n\n+"$HOME_SIZE"K\nn\np\n5\n\nw" > /tmp/fdisk.input
  
  # Create Partitions
  fdisk $HDD_NAME < /tmp/fdisk.input
  
  # Remove fdisk.input file
  rm /tmp/fdisk.input
  
  mkfs.ext2 -L boot $HDD_NAME'1'
  mkswap -L swap $HDD_NAME'2'
  mkfs.ext4 -L root $HDD_NAME'3'
  mkfs.ext4 -L home $HDD_NAME'4'
  
  #enable swap
  swapon $HDD_NAME'2'
  
  #mount all patitions
  mount $HDD_NAME'3' /mnt
  mkdir /mnt/boot
  mkdir /mnt/home
  mount $HDD_NAME'1' /mnt/boot
  mount $HDD_NAME'4' /mnt/home

  #clean
  CHOISE_ARRAY=''
  return 0
}

function install_base() {
  pacstrap /mnt base base-devel
  genfstab -p /mnt > /mnt/etc/fstab
  echo $HOSTNAME > /mnt/etc/hostname
  echo 'LANG='$LANGUAGE'.UTF-8' > /mnt/etc/locale.conf
  echo 'LC_COLLATE=C' >> /mnt/etc/locale.conf
  echo 'KEYMAP='$KEYMAP > /mnt/etc/vconsole.conf
  arch_chroot 'ln -s /usr/share/zoneinfo/'$TIMEZONE' /etc/localtime'
  arch_chroot 'rm -rf /etc/locale.gen'
  arch_chroot 'touch /etc/locale.gen'
  echo $LANGUAGE'.UTF-8 UTF-8' > /mnt/etc/locale.gen

  #Set locales
  #Steam workaround
  if [ $LANGUAGE = "en_US" ]
  then
    echo "OK!"
  else
    echo 'en_US.UTF-8 UTF-8' >> /mnt/etc/locale.gen
  fi
  
  #create locales
  arch_chroot 'locale-gen'

  #Install extra system stuff
  arch_chroot "pacman --noconfirm -S networkmanager sudo wpa_supplicant"

  #enable NetworkManager
  arch_chroot 'systemctl enable NetworkManager.service'
  
  #enable mutilib
  MULTILIB=''
  ARCH=$(uname -m)
  if [ $ARCH = "x86_64" ]
  then
   MULTILIB=`grep -n "\[multilib\]" /mnt/etc/pacman.conf | cut -f1 -d:`
    if [ -z $MULTILIB ]
    then
      echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /mnt/etc/pacman.conf
    else
      sed -i "${MULTILIB}s/^#//" /mnt/etc/pacman.conf
      local MULTILIB=$(( $MULTILIB + 1 ))
      sed -i "${MULTILIB}s/^#//" /mnt/etc/pacman.conf
    fi
  fi
  
  arch_chroot 'pacman -Syy'
  
  #create Linux Kernel
  arch_chroot 'mkinitcpio -p linux'

  #configure Clock
  arch_chroot "hwclock --systohc --utc"

  #accountsservice Lightdm bugFix
  arch_chroot "pacman --noconfirm -S accountsservice"

  #Enable Grub
  arch_chroot 'pacman --noconfirm -S grub'
  echo "" >> /mnt/etc/default/grub
  echo "# fix broken grub.cfg gen" >> /mnt/etc/default/grub
  echo "GRUB_DISABLE_SUBMENU=y" >> /mnt/etc/default/grub
  arch_chroot 'grub-install --target=i386-pc --recheck --debug '${HDD_NAME}
  arch_chroot 'grub-mkconfig -o /boot/grub/grub.cfg'
  
  #SET Root password
  arch_chroot 'passwd'

  mv archfix /mnt/root/archfix
  
  umount $HDD_NAME'1'
  umount $HDD_NAME'3'
  umount $HDD_NAME'4'

  reboot #<< end
  return 0
}

function optimize_mirrorlist() {
  clear
  echo "******************************************************"
  echo "*************** optimizing mirrorlist! ***************"
  echo "******************************************************"
  echo ""
  message_print 0 "******************************************************"
  message_print 0 "*******please wait, this will take a few minutes!*****"
  message_print 0 "******************************************************"
  echo ""

  TFILE="/tmp/mirrorlist.tmp"
  CCODE=${LANGUAGE:3:2}
  URL="https://www.archlinux.org/mirrorlist/?country=${CCODE}&use_mirror_status=on"

  curl -so ${TFILE} ${URL}
  sed -i 's/^#Server/Server/g' ${TFILE}

  echo -n " [working]... "
  spinner "start"
  rankmirrors -n 6 $TFILE > /etc/pacman.d/mirrorlist
  sed -i '/^#/ d' /etc/pacman.d/mirrorlist
  spinner "stop"
  echo "";
  echo "";

  pacman -Syy
  return 0
}

function install_yaourt() {
  clear
  echo "******************************************************"
  echo "***************   Installing YAOURT!   ***************"
  echo "******************************************************"
  echo ""

  cd /tmp
  echo "Retrieving package-query ..."
  curl -O https://aur.archlinux.org/packages/pa/package-query/package-query.tar.gz
  echo "Retrieving yaourt ..."
  curl -O https://aur.archlinux.org/packages/ya/yaourt/yaourt.tar.gz

  echo "Uncompressing package-query ..."
  tar zxvf package-query.tar.gz
  cd package-query
  echo "Installing package-query ..."
  makepkg -si --asroot --noconfirm

  cd ..

  echo "Uncompressing yaourt ..."
  tar zxvf yaourt.tar.gz
  cd yaourt
  echo "Installing yaourt ..."
  makepkg -si --asroot --noconfirm

  cd ..

  rm -rf package-query
  rm -rf yaourt
  rm -rf package-query.tar.gz
  rm -rf yaourt.tar.gz

  cd
  return 0
}

function install_package() {
  case "$1" in
   "pacman")
    su - ${USERNAME} -c ' pacman --noconfirm -S '"$2"
    ;;
   "yaourt")
    su - ${USERNAME} -c ' yaourt --noconfirm -S '"$2"
    ;;
    "powerpill")
    su - ${USERNAME} -c ' powerpill --noconfirm -S '"$2"
    echo  ""
    ;;
   *)
    echo ''
    ;;
  esac

  return 0
}

function adduser() {
  clear
  echo "******************************************************"
  echo "***************      Add USER!         ***************"
  echo "******************************************************"
  echo ""
  read -p "Enter username : " USERNAME
  useradd -m -g users -G audio,lp,network,optical,scanner,storage,sys,video,power,wheel -d /home/$USERNAME -s /bin/bash $USERNAME
  echo ""
  message_print 0 "******************************************************"
  message_print 0 "*****please enter a secure password for the user!*****"
  message_print 0 "******************************************************"
  echo ""
  passwd $USERNAME

  ## Uncomment to allow members of group wheel to execute any command
  sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
  return 0
}

function install_powerpill() {
  clear
  echo "******************************************************"
  echo "***************  Installing POWERPILL! ***************"
  echo "******************************************************"
  echo ""
  install_package "yaourt" "powerpill"
  reflector -p rsync -f n -l m
  powerpill -Syu
  return 0
}

function install_compress_tools() {
  clear
  echo "******************************************************"
  echo "*********   Installing Compress Tools! ***************"
  echo "******************************************************"
  echo ""

  install_package "powerpill" "unrar zip p7zip arj unace unzip"
  install_package "powerpill" "file-roller"
  return 0
}

function install_alsa() {
  clear
  echo "******************************************************"
  echo "*********       Installing Alsa!       ***************"
  echo "******************************************************"
  echo ""
  ARCH=$(uname -m)
  install_package "powerpill" "alsa-utils alsa-plugins"
  [[ ${ARCH} == x86_64 ]] && install_package "powerpill" "lib32-alsa-plugins"
  return 0
}

function install_pulse() {
  clear
  echo "******************************************************"
  echo "*********     Installing Pulseaudio!   ***************"
  echo "******************************************************"
  echo ""
  ARCH=$(uname -m)
  install_package "powerpill" "pulseaudio pulseaudio-alsa"
  [[ ${ARCH} == x86_64 ]] && install_package "powerpill" "lib32-libpulse"
  echo "load-module module-switch-on-connect" >> /etc/pulse/default.pa
  return 0
}

function install_bash_goodies() {
  clear
  echo "******************************************************"
  echo "*********   Installing Bash Goodies!   ***************"
  echo "******************************************************"
  echo ""
  install_package "powerpill" "bc rsync mlocate bash-completion pkgstats ntp"
  updatedb
  timedatectl set-ntp true
  return 0
}

function install_avahi_deamon() {
  clear
  echo "******************************************************"
  echo "*********   Installing Avahi Deamon!   ***************"
  echo "******************************************************"
  echo ""
  install_package "powerpill" "avahi nss-mdns"
  systemctl enable avahi-daemon
  systemctl enable avahi-dnsconfd
  return 0
}

function install_ntfs_tools() {
  clear
  echo "******************************************************"
  echo "*********   Installing NTFS TOOLS!     ***************"
  echo "******************************************************"
  echo ""
  install_package "powerpill" "ntfs-3g dosfstools exfat-utils fuse fuse-exfat"
  add_module "fuse"
  return 0
}

function install_openssh() {
  clear
  echo "******************************************************"
  echo "*********   Installing OPEN SSH  !     ***************"
  echo "******************************************************"
  echo ""
  install_package "powerpill" "openssh"
  return 0
}

function readahead_on() {
  clear
  echo "******************************************************"
  echo "*********      enable readahead  !     ***************"
  echo "******************************************************"
  echo ""

  systemctl enable systemd-readahead-collect
  systemctl enable systemd-readahead-replay
}

function install_xserver() {
  clear
  echo "******************************************************"
  echo "*********   Installing X Server  !     ***************"
  echo "******************************************************"
  echo ""
  install_package "powerpill" "xorg-server xorg-server-utils xorg-xinit"
  install_package "powerpill" "xf86-input-synaptics xf86-input-mouse xf86-input-keyboard"
  install_package "powerpill" "mesa gamin"
  localectl set-keymap ${KEYMAP}
  
  #X Server Keyboard layout
  CCODE=${LANGUAGE:0:2}
  touch /etc/X11/xorg.conf.d/20-keyboard.conf 
  echo 'Section "InputClass"' >> /etc/X11/xorg.conf.d/20-keyboard.conf 
  echo '       Identifier "keyboard"' >> /etc/X11/xorg.conf.d/20-keyboard.conf 
  echo '       MatchIsKeyboard "yes"' >> /etc/X11/xorg.conf.d/20-keyboard.conf 
  echo '       Option "XkbLayout" "'$CCODE'"' >> /etc/X11/xorg.conf.d/20-keyboard.conf 
  echo 'EndSection' >> /etc/X11/xorg.conf.d/20-keyboard.conf 

  return 0
}

function install_infinality_font_config() {
  clear
  echo "******************************************************"
  echo "*******     Installing infinality font config ! ******"
  echo "******************************************************"
  echo ""
  ARCH=$(uname -m)
  add_key "962DDE58"
  add_repository "infinality-bundle" "http://bohoomil.com/repo/\$arch"
  [[ $ARCH == x86_64 ]] && add_repository "infinality-bundle-multilib" "http://bohoomil.com/repo/multilib/\$arch"
  pacman -Syu
  pacman --noconfirm -Rdds freetype2 fontconfig cairo
  pacman --noconfirm -Rdds freetype2-ubuntu fontconfig-ubuntu cairo-ubuntu

  pacman --noconfirm --needed -S infinality-bundle
  [[ $ARCH == x86_64 ]] && pacman --noconfirm --needed -S infinality-bundle-multilib
  
  return 0
}

function install_openssh() {
  clear
  echo "******************************************************"
  echo "*********   Installing OPEN SSH  !     ***************"
  echo "******************************************************"
  echo ""
  install_package "powerpill" "openssh"
  return 0
}

function install_video_driver() {
  clear
  echo "******************************************************"
  echo "*********   Installing VIDEO DRIVER  ! ***************"
  echo "******************************************************"
  echo ""
  ARCH=$(uname -m)

  CHOISE_ARRAY=''
  echo "Please select your Video Card"
  CHOISE_ARRAY[0]="NVIDIA"
  CHOISE_ARRAY[1]="bumblebee"
  CHOISE_ARRAY[2]="Catalyst"
  CHOISE_ARRAY[3]="VirtualBox"
  choise_menu

  if [ $RESULT -eq 1 ] #NVIDIA
  then
    pacman --noconfirm -Rdds nouveau-dri
    pacman --noconfirm --needed -S nvidia{,-utils}
    install_package "powerpill" "pangox-compat"
    install_package "powerpill" "libva-vdpau-driver"
    if [[ ${ARCH} == x86_64 ]]
    then
    	pacman --noconfirm -Rdds lib32-nouveau-dri
    	pacman --noconfirm --needed -S  "lib32-nvidia-utils"
    fi
    mkinitcpio -p linux
    nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite -no-logo --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
  fi

  if [ $RESULT -eq 2 ] #bumblebee
  then
    pacman --noconfirm -Rdds nouveau-dri
    pacman --noconfirm --needed -S xf86-video-intel bumblebee nvidia
    install_package "powerpill" "pangox-compat"
    install_package "powerpill" "libva-vdpau-driver"
    if [[ ${ARCH} == x86_64 ]]
    then
    	pacman --noconfirm -Rdds lib32-nouveau-dri
    	pacman --noconfirm --needed -S  "lib32-nvidia-utils"
    fi
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    gpasswd -a ${USERNAME} bumblebee
  fi

  if [ $RESULT -eq 3 ] #Catalyst
  then
    pacman --noconfirm -Rdds ati-dri
   [[ -f /etc/modules-load.d/ati.conf ]] && rm /etc/modules-load.d/ati.conf
    if [[ ${ARCHI} == x86_64 ]]; then
      pacman --noconfirm -Rdds lib32-ati-dri
    fi
    install_package "powerpill" "linux-headers"
    install_package "yaourt" "catalyst-total"
    aticonfig --initial --output=/etc/X11/xorg.conf.d/20-radeon.conf
    systemctl enable atieventsd
    systemctl enable catalyst-hook
    systemctl enable temp-links-catalyst
   
  fi

  if [ $RESULT -eq 4 ] #VirtualBox
  then
   install_package "powerpill" "virtualbox-guest-utils"
   install_package "powerpill" "mesa-libgl"
   add_module "vboxguest vboxsf vboxvideo" "virtualbox-guest"
   gpasswd -a ${USERNAME} vboxsf
   systemctl disable ntpd
   systemctl enable vboxservice
  fi

  CHOISE_ARRAY=''
  return 0
}



first_choise

